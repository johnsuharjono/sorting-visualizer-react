{"version":3,"sources":["SortingAlgorithm/mergeSort.js","SortingAlgorithm/insertionSort.js","SortingAlgorithm/selectionSort.js","SortingAlgorithm/bubbleSort.js","SortingAlgorithm/quickSort.js","SortingVisualizer/Navbar.jsx","SortingVisualizer/Footer.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","arr","copyArr","slice","len","length","animations","mergeSortHelper","aux","left","right","mid","Math","floor","i","j","k","push","doMerge","Array","getInsertionSortAnimations","console","log","swap","insertionSortHelper","getSelectionSortAnimations","min","temp","selectionSortHelper","getBubbleSortAnimations","bubbleSortHelper","getQuickSortAnimations","quickSort","start","end","pIndex","pivot","partitionIndex","partition","Navbar","props","resetArray","className","fontsize","style","color","Typography","variant","Button","onClick","Footer","mergeSort","insertionSort","selectionSort","bubbleSort","Grid","display","container","direction","justify","justifyContent","alignItems","spacing","item","makeStyles","root","alignContent","SortingVisualizer","useState","array","setArray","isSorting","setIsSorting","isSorted","setIsSorted","lengthArray","setLengthArray","delay","setDelay","useEffect","animate","resetArrayColour","forEach","index","comparison","swapped","setTimeout","prevArr","k1","newValue1","k2","newValue2","newArr","newValue","showComparison","arrayBars","document","getElementsByClassName","arrayBarStyle","backgroundColor","animateSortedArray","random","Slider","value","onChange","event","aria-labelledby","max","map","barHeight","height","width","key","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d5817d50.chunk.js","sourcesContent":["export function getMergeSortAnimations(arr) {\n  // make copyArr so it does not modify the original array\n  const copyArr = arr.slice();\n  const len = copyArr.length;\n  const aux = Array(len);\n  //the animations array that will be return\n  const animations = [];\n  mergeSortHelper(copyArr, aux, 0, len - 1, animations);\n  return animations;\n}\n\n// I learn the merge sort algorithm from this YT video: https://www.youtube.com/watch?v=TzeBrDU-JaY&t=510s\n\nfunction mergeSortHelper(copyArr, aux, left, right, animations) {\n  if (right === left) return; // array of length 1 reached, base condition for the recursive call\n  const mid = left + Math.floor((right - left) / 2); // find the midpoint then call mergesort recursively\n  mergeSortHelper(copyArr, aux, left, mid, animations);\n  mergeSortHelper(copyArr, aux, mid + 1, right, animations);\n  doMerge(copyArr, aux, left, mid, right, animations); //combining the array that have been splitted\n}\n\nfunction doMerge(arr, aux, left, mid, right, animations) {\n  // arr here is the copy of the array, so does not modify the original array.\n  // you can think of the auxiliary array as the array that have the value not yet merged\n  for (let i = left; i <= right; i++) aux[i] = arr[i];\n  let i = left; // i is the index for left subarray\n  let j = mid + 1; // j is the index for right subarray\n  for (let k = left; k <= right; k++) {\n    // there is 4 cases whereby we take values to merge\n\n    // 1. when all the right array have been added.\n    if (i > mid) {\n      animations.push([[j], false]);\n      animations.push([[k, aux[j]], true]);\n      arr[k] = aux[j];\n      j++;\n    }\n    // 2. when all the left array have been added\n    else if (j > right) {\n      animations.push([[i], false]);\n      animations.push([[k, aux[i]], true]);\n      arr[k] = aux[i];\n      i++;\n    }\n    // 3. when the value in the right array is smaller then the value in the left array\n    // we take values from the right array\n    else if (aux[j] < aux[i]) {\n      animations.push([[i, j], false]);\n      animations.push([[k, aux[j]], true]);\n      arr[k] = aux[j];\n      j++;\n    }\n    // 4. when the value in the left array is smaller then the value in the right array\n    // we take values from the left array\n    else {\n      animations.push([[i, j], false]);\n      animations.push([[k, aux[i]], true]);\n      arr[k] = aux[i];\n      i++;\n    }\n  }\n}\n","export function getInsertionSortAnimations(arr) {\n  const copyArr = arr.slice();\n  console.log(copyArr);\n\n  const animations = [];\n  insertionSortHelper(copyArr, animations);\n  return animations;\n}\n\nfunction insertionSortHelper(copyArr, animations) {\n  for (let i = 1; i < copyArr.length; i++) {\n    for (let j = i - 1; j >= 0; j--) {\n      animations.push([[j, j + 1], false]);\n      if (copyArr[j + 1] < copyArr[j]) {\n        animations.push([[j, copyArr[j + 1], j + 1, copyArr[j]], true]);\n        swap(copyArr, j, j + 1);\n      } else {\n        break;\n      }\n    }\n  }\n}\n\nfunction swap(arr, i, j) {\n  [arr[i], arr[j]] = [arr[j], arr[i]];\n}\n","export function getSelectionSortAnimations(arr) {\n  const copyArr = arr.slice();\n  console.log(copyArr);\n\n  const animations = [];\n  selectionSortHelper(copyArr, animations);\n  return animations;\n}\n\nfunction selectionSortHelper(arr, animations) {\n  for (var i = 0; i < arr.length; ++i) {\n    var min = i;\n    for (var j = i; j < arr.length; ++j) {\n      animations.push([[min, j], false]);\n      if (arr[min] > arr[j]) {\n        min = j;\n      }\n    }\n    animations.push([[i, min], false]);\n    animations.push([[i, arr[min], min, arr[i]], true]);\n    var temp = arr[min];\n    arr[min] = arr[i];\n    arr[i] = temp;\n  }\n  console.log(arr);\n}\n","export function getBubbleSortAnimations(arr) {\n  const copyArr = arr.slice();\n  console.log(copyArr);\n\n  const animations = [];\n  bubbleSortHelper(copyArr, animations);\n  return animations;\n}\n\nfunction bubbleSortHelper(arr, animations) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length - i - 1; j++) {\n      animations.push([[j, j + 1], false]);\n      if (arr[j] > arr[j + 1]) {\n        swap(arr, j, j + 1);\n        animations.push([[j, arr[j], j + 1, arr[j + 1]], true]);\n      }\n    }\n  }\n  console.log(arr);\n}\n\nfunction swap(arr, i, j) {\n  [arr[i], arr[j]] = [arr[j], arr[i]];\n}\n","export function getQuickSortAnimations(arr) {\n  const copyArr = arr.slice();\n  console.log(copyArr);\n\n  const animations = [];\n  quickSort(copyArr, 0, copyArr.length - 1, animations);\n  console.log(copyArr);\n  return animations;\n}\n\nfunction quickSort(arr, start, end, animations) {\n  if (start >= end) {\n    return;\n  }\n  var pIndex = partition(arr, start, end, animations);\n  quickSort(arr, start, pIndex - 1, animations);\n  quickSort(arr, pIndex + 1, end, animations);\n}\n\nfunction partition(arr, start, end, animations) {\n  var pivot = arr[end];\n  var partitionIndex = start;\n  for (let i = start; i < end; i++) {\n    if (arr[i] <= pivot) {\n      swap(arr, i, partitionIndex);\n      animations.push([[i, partitionIndex], false]);\n      animations.push([[i, arr[i], partitionIndex, arr[partitionIndex]], true]);\n      partitionIndex++;\n    }\n  }\n  swap(arr, partitionIndex, end);\n  animations.push([[end, partitionIndex], false]);\n  animations.push([[end, arr[end], partitionIndex, arr[partitionIndex]], true]);\n  return partitionIndex;\n}\n\nfunction swap(arr, i, j) {\n  [arr[i], arr[j]] = [arr[j], arr[i]];\n}\n","import { Button } from '@material-ui/core'\nimport './Navbar.css'\nimport { Typography } from '@material-ui/core'\nimport SortIcon from '@material-ui/icons/Sort'\nimport React from 'react'\n\nconst Navbar = (props) => {\n\tconst resetArray = props.resetArray\n\treturn (\n\t\t<div className='navbar'>\n\t\t\t<div className='logo'>\n\t\t\t\t<SortIcon fontsize='large' style={{ color: 'rgb(252 231 243)' }} />\n\t\t\t\t<Typography variant='h4' style={{ color: 'rgb(252 231 243)' }}>\n\t\t\t\t\tSortViz\n\t\t\t\t</Typography>\n\t\t\t</div>\n\t\t\t<div className='reset-array'>\n\t\t\t\t<Button variant='contained' color='primary' onClick={resetArray}>\n\t\t\t\t\t<Typography>Generate New Array</Typography>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Navbar\n","import { Button } from \"@material-ui/core\";\nimport \"./Footer.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React from \"react\";\n\nconst Footer = (props) => {\n  const resetArray = props.resetArray;\n  const mergeSort = props.mergeSort;\n  const insertionSort = props.insertionSort;\n  const selectionSort = props.selectionSort;\n  const bubbleSort = props.bubbleSort;\n  const quickSort = props.quickSort;\n\n  return (\n    <div className=\"footer\">\n      <Grid\n        display=\"flex\"\n        container\n        direction=\"row\"\n        justify=\"center\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={resetArray}>\n            Generate new array\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={mergeSort}>\n            Merge Sort\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={insertionSort}>\n            Insertion Sort\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={selectionSort}>\n            Selection Sort\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={bubbleSort}>\n            Bubble Sort\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={quickSort}>\n            Quick Sort\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useEffect, useState } from 'react'\nimport './SortingVisualizer.css'\nimport { getMergeSortAnimations } from '../SortingAlgorithm/mergeSort'\nimport { getInsertionSortAnimations } from '../SortingAlgorithm/insertionSort'\nimport { getSelectionSortAnimations } from '../SortingAlgorithm/selectionSort'\nimport { getBubbleSortAnimations } from '../SortingAlgorithm/bubbleSort'\nimport { getQuickSortAnimations } from '../SortingAlgorithm/quickSort'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Slider from '@material-ui/core/Slider'\nimport Navbar from './Navbar'\nimport Footer from './Footer'\n\nconst useStyles = makeStyles({\n\troot: {\n\t\talignContent: 'center',\n\t\talignItems: 'center',\n\t\tjustify: 'center',\n\t},\n})\n\nconst L_BOUND = 50 // minimum height of the array\nconst U_BOUND = 350 // maximum height of the array\nconst COMPARISON_COLOUR = 'rgb(251 207 232)'\nconst SORTED_COLOUR = 'rgb(157 23 77)'\n\nexport default function SortingVisualizer() {\n\tconst [array, setArray] = useState([])\n\tconst [isSorting, setIsSorting] = useState(false)\n\tconst [isSorted, setIsSorted] = useState(false)\n\tconst [lengthArray, setLengthArray] = useState(40)\n\tconst [delay, setDelay] = useState(8)\n\n\t// eslint-disable-next-line\n\tuseEffect(resetArray, [lengthArray])\n\n\tconst mergeSort = () => {\n\t\tconst animations = getMergeSortAnimations(array)\n\t\tanimate(animations)\n\t}\n\n\tconst insertionSort = () => {\n\t\tconst animations = getInsertionSortAnimations(array)\n\t\tanimate(animations)\n\t}\n\n\tconst selectionSort = () => {\n\t\tconst animations = getSelectionSortAnimations(array)\n\t\tanimate(animations)\n\t}\n\n\tconst bubbleSort = () => {\n\t\tconst animations = getBubbleSortAnimations(array)\n\t\tanimate(animations)\n\t}\n\tconst quickSort = () => {\n\t\tconst animations = getQuickSortAnimations(array)\n\t\tanimate(animations)\n\t}\n\n\tconst animate = (animations) => {\n\t\tif (isSorting) return // does not interrupt when we are sorting\n\t\tif (isSorted) resetArrayColour()\n\t\tsetIsSorted(false)\n\t\tsetIsSorting(true)\n\t\tanimations.forEach(([comparison, swapped], index) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!swapped) {\n\t\t\t\t\tif (comparison.length === 2) {\n\t\t\t\t\t\tconst [i, j] = comparison\n\t\t\t\t\t\tshowComparison(i)\n\t\t\t\t\t\tshowComparison(j)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst [i] = comparison\n\t\t\t\t\t\tshowComparison(i)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetArray((prevArr) => {\n\t\t\t\t\t\tif (comparison.length === 4) {\n\t\t\t\t\t\t\tconst [k1, newValue1, k2, newValue2] = comparison\n\t\t\t\t\t\t\tconst newArr = prevArr.slice()\n\t\t\t\t\t\t\tnewArr[k1] = newValue1\n\t\t\t\t\t\t\tnewArr[k2] = newValue2\n\t\t\t\t\t\t\treturn newArr\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst [k, newValue] = comparison\n\t\t\t\t\t\t\tconst newArr = prevArr.slice()\n\t\t\t\t\t\t\tnewArr[k] = newValue\n\t\t\t\t\t\t\treturn newArr\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}, index * delay)\n\t\t})\n\t\tsetTimeout(() => {\n\t\t\tanimateSortedArray()\n\t\t}, animations.length * delay * 1.02) // animations.length ensure change the colour when the array already sorted\n\t}\n\n\tfunction showComparison(index) {\n\t\tconst arrayBars = document.getElementsByClassName('array-bar')\n\t\tconst arrayBarStyle = arrayBars[index].style\n\t\tsetTimeout(() => {\n\t\t\tarrayBarStyle.backgroundColor = COMPARISON_COLOUR\n\t\t}, delay)\n\t\tsetTimeout(() => {\n\t\t\tarrayBarStyle.backgroundColor = ''\n\t\t}, delay * 2)\n\t}\n\n\tfunction animateSortedArray() {\n\t\tconst arrayBars = document.getElementsByClassName('array-bar')\n\t\tfor (let i = 0; i < arrayBars.length; i++) {\n\t\t\tconst arrayBarStyle = arrayBars[i].style\n\t\t\tsetTimeout(\n\t\t\t\t() => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\n\t\t\t\ti * delay\n\t\t\t)\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tsetIsSorted(true)\n\t\t\tsetIsSorting(false)\n\t\t}, arrayBars.length * delay)\n\t}\n\n\tfunction resetArrayColour() {\n\t\tconst arrayBars = document.getElementsByClassName('array-bar')\n\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\tconst arrayBarStyle = arrayBars[i].style\n\t\t\tarrayBarStyle.backgroundColor = ''\n\t\t}\n\t}\n\n\tfunction resetArray() {\n\t\tif (isSorting) return\n\t\tif (isSorted) resetArrayColour()\n\t\tsetIsSorted(false)\n\t\tconst arr = []\n\t\tfor (let i = 0; i < lengthArray; i++) {\n\t\t\tarr.push(random(L_BOUND, U_BOUND))\n\t\t}\n\t\tsetArray(arr)\n\t\tconsole.log(arr)\n\t}\n\n\tconst handleSpeed = (event, newValue) => {\n\t\tif (isSorting) return\n\t\tsetDelay(newValue)\n\t}\n\n\tconst handleChange = (event, newValue) => {\n\t\tif (isSorting) return\n\t\tsetLengthArray(newValue)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Navbar resetArray={resetArray} />\n\t\t\t<div className='visualizer-container'>\n\t\t\t\t<div className='controlPanel'>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Adjust Delay!</p>\n\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\tclassName='slider'\n\t\t\t\t\t\t\tvalue={delay}\n\t\t\t\t\t\t\tonChange={handleSpeed}\n\t\t\t\t\t\t\taria-labelledby='continuous-slider'\n\t\t\t\t\t\t\tmin={2}\n\t\t\t\t\t\t\tmax={15}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Number of Array!</p>\n\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\tclassName='slider'\n\t\t\t\t\t\t\tvalue={lengthArray}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\taria-labelledby='continuous-slider'\n\t\t\t\t\t\t\tmin={10}\n\t\t\t\t\t\t\tmax={70}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* <Grid\n\t\t\t\t\tcontainer\n\t\t\t\t\tspacing={0}\n\t\t\t\t\tdirection='row'\n\t\t\t\t\tjustify='center'\n\t\t\t\t\talignItems='center'\n\t\t\t\t>\n\t\t\t\t\t<Grid item xs='1'>\n\t\t\t\t\t\t<RemoveIcon />\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs='1'>\n\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\tvalue={lengthArray}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\taria-labelledby='continuous-slider'\n\t\t\t\t\t\t\tmin={10}\n\t\t\t\t\t\t\tmax={70}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs='1'>\n\t\t\t\t\t\t<AddIcon />\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid> */}\n\n\t\t\t\t<div className='array-container'>\n\t\t\t\t\t{array.map((barHeight, index) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='array-bar'\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\theight: `${barHeight}px`,\n\t\t\t\t\t\t\t\twidth: `${700 / lengthArray}px`,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<Footer\n\t\t\t\tresetArray={resetArray}\n\t\t\t\tmergeSort={mergeSort}\n\t\t\t\tinsertionSort={insertionSort}\n\t\t\t\tselectionSort={selectionSort}\n\t\t\t\tbubbleSort={bubbleSort}\n\t\t\t\tquickSort={quickSort}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\n// random number function\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min\n","import './App.css'\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport React from 'react'\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<SortingVisualizer />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}