{"version":3,"sources":["SortingAlgorithm/mergeSort.js","SortingAlgorithm/insertionSort.js","SortingAlgorithm/selectionSort.js","SortingAlgorithm/bubbleSort.js","SortingAlgorithm/quickSort.js","SortingVisualizer/Navbar.jsx","SortingVisualizer/Footer.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","arr","copyArr","slice","len","length","animations","mergeSortHelper","Array","aux","left","right","mid","Math","floor","i","j","k","push","doMerge","getInsertionSortAnimations","console","log","swap","insertionSortHelper","getSelectionSortAnimations","min","temp","selectionSortHelper","getBubbleSortAnimations","bubbleSortHelper","getQuickSortAnimations","quickSort","start","end","pIndex","pivot","partitionIndex","partition","Navbar","props","resetArray","className","fontsize","style","color","Typography","variant","Button","onClick","Footer","mergeSort","insertionSort","selectionSort","bubbleSort","Grid","display","container","direction","justify","justifyContent","alignItems","spacing","item","useStyles","makeStyles","root","alignContent","DELAY","SORTED_COLOUR","SortingVisualizer","useState","array","setArray","isSorting","setIsSorting","isSorted","setIsSorted","React","lengthArray","setLengthArray","useEffect","animate","resetArrayColour","forEach","index","comparison","swapped","setTimeout","prevArr","k1","newValue1","k2","newValue2","newArr","newValue","showComparison","arrayBars","document","getElementsByClassName","arrayBarStyle","backgroundColor","animateSortedArray","random","classes","xs","Slider","value","onChange","event","max","map","barHeight","height","width","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6373dbbb.chunk.js","sourcesContent":["export function getMergeSortAnimations(arr) {\r\n  // make copyArr so it does not modify the original array\r\n  const copyArr = arr.slice();\r\n  const len = copyArr.length;\r\n  const aux = Array(len);\r\n  //the animations array that will be return\r\n  const animations = [];\r\n  mergeSortHelper(copyArr, aux, 0, len - 1, animations);\r\n  return animations;\r\n}\r\n\r\n// I learn the merge sort algorithm from this YT video: https://www.youtube.com/watch?v=TzeBrDU-JaY&t=510s\r\n\r\nfunction mergeSortHelper(copyArr, aux, left, right, animations) {\r\n  if (right === left) return; // array of length 1 reached, base condition for the recursive call\r\n  const mid = left + Math.floor((right - left) / 2); // find the midpoint then call mergesort recursively\r\n  mergeSortHelper(copyArr, aux, left, mid, animations);\r\n  mergeSortHelper(copyArr, aux, mid + 1, right, animations);\r\n  doMerge(copyArr, aux, left, mid, right, animations); //combining the array that have been splitted\r\n}\r\n\r\nfunction doMerge(arr, aux, left, mid, right, animations) {\r\n  // arr here is the copy of the array, so does not modify the original array.\r\n  // you can think of the auxiliary array as the array that have the value not yet merged\r\n  for (let i = left; i <= right; i++) aux[i] = arr[i];\r\n  let i = left; // i is the index for left subarray\r\n  let j = mid + 1; // j is the index for right subarray\r\n  for (let k = left; k <= right; k++) {\r\n    // there is 4 cases whereby we take values to merge\r\n\r\n    // 1. when all the right array have been added.\r\n    if (i > mid) {\r\n      animations.push([[j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n      arr[k] = aux[j];\r\n      j++;\r\n    }\r\n    // 2. when all the left array have been added\r\n    else if (j > right) {\r\n      animations.push([[i], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n      arr[k] = aux[i];\r\n      i++;\r\n    }\r\n    // 3. when the value in the right array is smaller then the value in the left array\r\n    // we take values from the right array\r\n    else if (aux[j] < aux[i]) {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n      arr[k] = aux[j];\r\n      j++;\r\n    }\r\n    // 4. when the value in the left array is smaller then the value in the right array\r\n    // we take values from the left array\r\n    else {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n      arr[k] = aux[i];\r\n      i++;\r\n    }\r\n  }\r\n}\r\n","export function getInsertionSortAnimations(arr) {\r\n  const copyArr = arr.slice();\r\n  console.log(copyArr);\r\n\r\n  const animations = [];\r\n  insertionSortHelper(copyArr, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSortHelper(copyArr, animations) {\r\n  for (let i = 1; i < copyArr.length; i++) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      animations.push([[j, j + 1], false]);\r\n      if (copyArr[j + 1] < copyArr[j]) {\r\n        animations.push([[j, copyArr[j + 1], j + 1, copyArr[j]], true]);\r\n        swap(copyArr, j, j + 1);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n  [arr[i], arr[j]] = [arr[j], arr[i]];\r\n}\r\n","export function getSelectionSortAnimations(arr) {\r\n  const copyArr = arr.slice();\r\n  console.log(copyArr);\r\n\r\n  const animations = [];\r\n  selectionSortHelper(copyArr, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSortHelper(arr, animations) {\r\n  for (var i = 0; i < arr.length; ++i) {\r\n    var min = i;\r\n    for (var j = i; j < arr.length; ++j) {\r\n      animations.push([[min, j], false]);\r\n      if (arr[min] > arr[j]) {\r\n        min = j;\r\n      }\r\n    }\r\n    animations.push([[i, min], false]);\r\n    animations.push([[i, arr[min], min, arr[i]], true]);\r\n    var temp = arr[min];\r\n    arr[min] = arr[i];\r\n    arr[i] = temp;\r\n  }\r\n  console.log(arr);\r\n}\r\n","export function getBubbleSortAnimations(arr) {\r\n  const copyArr = arr.slice();\r\n  console.log(copyArr);\r\n\r\n  const animations = [];\r\n  bubbleSortHelper(copyArr, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(arr, animations) {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    for (let j = 0; j < arr.length - i - 1; j++) {\r\n      animations.push([[j, j + 1], false]);\r\n      if (arr[j] > arr[j + 1]) {\r\n        swap(arr, j, j + 1);\r\n        animations.push([[j, arr[j], j + 1, arr[j + 1]], true]);\r\n      }\r\n    }\r\n  }\r\n  console.log(arr);\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n  [arr[i], arr[j]] = [arr[j], arr[i]];\r\n}\r\n","export function getQuickSortAnimations(arr) {\r\n  const copyArr = arr.slice();\r\n  console.log(copyArr);\r\n\r\n  const animations = [];\r\n  quickSort(copyArr, 0, copyArr.length - 1, animations);\r\n  console.log(copyArr);\r\n  return animations;\r\n}\r\n\r\nfunction quickSort(arr, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  var pIndex = partition(arr, start, end, animations);\r\n  quickSort(arr, start, pIndex - 1, animations);\r\n  quickSort(arr, pIndex + 1, end, animations);\r\n}\r\n\r\nfunction partition(arr, start, end, animations) {\r\n  var pivot = arr[end];\r\n  var partitionIndex = start;\r\n  for (let i = start; i < end; i++) {\r\n    if (arr[i] <= pivot) {\r\n      swap(arr, i, partitionIndex);\r\n      animations.push([[i, partitionIndex], false]);\r\n      animations.push([[i, arr[i], partitionIndex, arr[partitionIndex]], true]);\r\n      partitionIndex++;\r\n    }\r\n  }\r\n  swap(arr, partitionIndex, end);\r\n  animations.push([[end, partitionIndex], false]);\r\n  animations.push([[end, arr[end], partitionIndex, arr[partitionIndex]], true]);\r\n  return partitionIndex;\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n  [arr[i], arr[j]] = [arr[j], arr[i]];\r\n}\r\n","import { Button } from \"@material-ui/core\";\r\nimport \"./Navbar.css\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\n\r\nconst Navbar = (props) => {\r\n  const resetArray = props.resetArray;\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"logo\">\r\n        <SortIcon fontsize=\"large\" style={{ color: \"white\" }} />\r\n        <Typography variant=\"h4\" style={{ color: \"white\" }}>\r\n          SortViz\r\n        </Typography>\r\n      </div>\r\n      <div className=\"reset-array\">\r\n        <Button variant=\"contained\" color=\"primary\" onClick={resetArray}>\r\n          <Typography>Generate New Array</Typography>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { Button } from \"@material-ui/core\";\r\nimport \"./Footer.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst Footer = (props) => {\r\n  const resetArray = props.resetArray;\r\n  const mergeSort = props.mergeSort;\r\n  const insertionSort = props.insertionSort;\r\n  const selectionSort = props.selectionSort;\r\n  const bubbleSort = props.bubbleSort;\r\n  const quickSort = props.quickSort;\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <Grid\r\n        display=\"flex\"\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n      >\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={resetArray}>\r\n            Generate new array\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={mergeSort}>\r\n            Merge Sort\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={insertionSort}>\r\n            Insertion Sort\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={selectionSort}>\r\n            Selection Sort\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={bubbleSort}>\r\n            Bubble Sort\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={quickSort}>\r\n            Quick Sort\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithm/mergeSort\";\r\nimport { getInsertionSortAnimations } from \"../SortingAlgorithm/insertionSort\";\r\nimport { getSelectionSortAnimations } from \"../SortingAlgorithm/selectionSort\";\r\nimport { getBubbleSortAnimations } from \"../SortingAlgorithm/bubbleSort\";\r\nimport { getQuickSortAnimations } from \"../SortingAlgorithm/quickSort\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport Navbar from \"./Navbar\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    justify: \"center\",\r\n  },\r\n});\r\n\r\nconst L_BOUND = 5; // minimum height of the array\r\nconst U_BOUND = 350; // maximum height of the array\r\nconst DELAY = 10;\r\nconst COMPARISON_COLOUR = \"red\";\r\nconst SORTED_COLOUR = \"#1C0C5B\" ;\r\n\r\nexport default function SortingVisualizer() {\r\n  const [array, setArray] = useState([]);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const [lengthArray, setLengthArray] = React.useState(30);\r\n\r\n  // eslint-disable-next-line\r\n  useEffect(resetArray, [lengthArray]);\r\n\r\n  const mergeSort = () => {\r\n    const animations = getMergeSortAnimations(array);\r\n    animate(animations);\r\n  };\r\n\r\n  const insertionSort = () => {\r\n    const animations = getInsertionSortAnimations(array);\r\n    animate(animations);\r\n  };\r\n\r\n  const selectionSort = () => {\r\n    const animations = getSelectionSortAnimations(array);\r\n    animate(animations);\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    const animations = getBubbleSortAnimations(array);\r\n    animate(animations);\r\n  };\r\n  const quickSort = () => {\r\n    const animations = getQuickSortAnimations(array);\r\n    animate(animations);\r\n  };\r\n\r\n  const animate = (animations) => {\r\n    if (isSorting) return; // does not interrupt when we are sorting\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    setIsSorting(true);\r\n    animations.forEach(([comparison, swapped], index) => {\r\n      setTimeout(() => {\r\n        if (!swapped) {\r\n          if (comparison.length === 2) {\r\n            const [i, j] = comparison;\r\n            showComparison(i);\r\n            showComparison(j);\r\n          } else {\r\n            const [i] = comparison;\r\n            showComparison(i);\r\n          }\r\n        } else {\r\n          setArray((prevArr) => {\r\n            if (comparison.length === 4) {\r\n              const [k1, newValue1, k2, newValue2] = comparison;\r\n              const newArr = prevArr.slice();\r\n              newArr[k1] = newValue1;\r\n              newArr[k2] = newValue2;\r\n              return newArr;\r\n            } else {\r\n              const [k, newValue] = comparison;\r\n              const newArr = prevArr.slice();\r\n              newArr[k] = newValue;\r\n              return newArr;\r\n            }\r\n          });\r\n        }\r\n      }, index * DELAY);\r\n    });\r\n    setTimeout(() => {\r\n      animateSortedArray();\r\n    }, animations.length * DELAY * 1.02); // animations.length ensure change the colour when the array already sorted\r\n  };\r\n\r\n  function showComparison(index) {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = COMPARISON_COLOUR;\r\n    }, DELAY);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }, DELAY * 2);\r\n  }\r\n\r\n  function animateSortedArray() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      setTimeout(\r\n        () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n        i * DELAY\r\n      );\r\n    }\r\n    setTimeout(() => {\r\n      setIsSorted(true);\r\n      setIsSorting(false);\r\n    }, arrayBars.length * DELAY);\r\n  }\r\n\r\n  function resetArrayColour() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < array.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }\r\n  }\r\n\r\n  function resetArray() {\r\n    if (isSorting) return;\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    const arr = [];\r\n    for (let i = 0; i < lengthArray; i++) {\r\n      arr.push(random(L_BOUND, U_BOUND));\r\n    }\r\n    setArray(arr);\r\n    console.log(arr);\r\n  }\r\n\r\n  // for slider\r\n  const classes = useStyles();\r\n\r\n  const handleChange = (event, newValue) => {\r\n    if (isSorting) return;\r\n    setLengthArray(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar resetArray={resetArray} />\r\n      <div className=\"visualizer-container\">\r\n        <div className={classes.root}>\r\n          <Grid\r\n            container\r\n            spacing={0}\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs=\"1\">\r\n              <RemoveIcon />\r\n            </Grid>\r\n            <Grid item xs=\"1\">\r\n              <Slider\r\n                value={lengthArray}\r\n                onChange={handleChange}\r\n                aria-labelledby=\"continuous-slider\"\r\n                min={10}\r\n                max={70}\r\n              />\r\n            </Grid>\r\n            <Grid item xs=\"1\">\r\n              <AddIcon />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n\r\n        <div className=\"array-container\">\r\n          {array.map((barHeight, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              style={{\r\n                height: `${barHeight}px`,\r\n                width: `${700 / lengthArray}px`,\r\n              }}\r\n              key={index}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <Footer\r\n        resetArray={resetArray}\r\n        mergeSort={mergeSort}\r\n        insertionSort={insertionSort}\r\n        selectionSort={selectionSort}\r\n        bubbleSort={bubbleSort}\r\n        quickSort={quickSort}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// random number function\r\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\r\n","import \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}